// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_loop() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: std::ops::Range<i32>;
    let mut _3: std::ops::Range<i32>;
    let mut _5: std::option::Option<i32>;
    let mut _6: &mut std::ops::Range<i32>;
    let mut _7: isize;
    let mut _9: (i32, bool);
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let _12: &[&str; 2];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &i32;
    scope 1 {
        debug sum => _1;
        let mut _4: std::ops::Range<i32>;
        scope 2 {
            debug iter => _4;
            let _8: i32;
            scope 3 {
                debug i => _8;
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _3 = std::ops::Range::<i32> { start: const 1_i32, end: const 10_i32 };
        _2 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _2;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <std::ops::Range<i32> as Iterator>::next(copy _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb5, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = copy ((_5 as Some).0: i32);
        _9 = AddWithOverflow(copy _1, copy _8);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", copy _1, copy _8) -> [success: bb7, unwind continue];
    }

    bb6: {
        _12 = const test_loop::promoted[0];
        _16 = &_1;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<i32>(copy _16) -> [return: bb8, unwind continue];
    }

    bb7: {
        _1 = move (_9.0: i32);
        goto -> bb2;
    }

    bb8: {
        _14 = [move _15];
        _13 = &_14;
        _11 = Arguments::<'_>::new_v1::<2, 1>(copy _12, copy _13) -> [return: bb9, unwind continue];
    }

    bb9: {
        _10 = _print(move _11) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

const test_loop::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "The sum is: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = test_loop() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
