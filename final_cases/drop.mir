// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at drop.rs:5:1: 5:23>::drop(_1: &mut Resource) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let _4: &[&str; 2];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &i32;

    bb0: {
        _4 = const <Resource as std::ops::Drop>::drop::promoted[0];
        _8 = &((*_1).0: i32);
        _7 = core::fmt::rt::Argument::<'_>::new_display::<i32>(copy _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = [move _7];
        _5 = &_6;
        _3 = Arguments::<'_>::new_v1::<2, 1>(copy _4, copy _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

const <impl at drop.rs:5:1: 5:23>::drop::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Dropping resource with value: ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn test_drop() -> () {
    let mut _0: ();
    let _1: Resource;
    let _3: ();
    scope 1 {
        debug r1 => _1;
        let _2: Resource;
        scope 2 {
            debug r2 => _2;
        }
    }

    bb0: {
        _1 = Resource { value: const 1_i32 };
        _2 = Resource { value: const 2_i32 };
        _3 = std::mem::drop::<Resource>(move _1) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = test_drop() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
