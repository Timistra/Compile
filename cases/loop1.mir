// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_loop_and_break() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: (i32, bool);
    let mut _3: i32;
    scope 1 {
        debug counter => _1;
    }

    bb0: {
        _1 = const 0_i32;
        goto -> bb1;
    }

    bb1: {
        _2 = AddWithOverflow(copy _1, const 1_i32);
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", copy _1, const 1_i32) -> [success: bb2, unwind continue];
    }

    bb2: {
        _1 = move (_2.0: i32);
        _3 = copy _1;
        switchInt(move _3) -> [10: bb3, otherwise: bb1];
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = test_loop_and_break() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
