// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = test_array_slice() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_array_slice() -> () {
    let mut _0: ();
    let _1: [i32; 5];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let _6: &[i32];
    let mut _7: &[i32; 5];
    let mut _8: std::ops::Range<usize>;
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &i32;
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &usize;
    scope 1 {
        debug arr => _1;
        let _2: i32;
        scope 2 {
            debug first => _2;
            scope 3 {
                debug slice => _6;
                let _9: usize;
                scope 4 {
                    debug len => _9;
                    let mut _22: &[&str; 2];
                    let mut _23: &[&str; 2];
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _3 = const 0_usize;
        _4 = const 5_usize;
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _2 = _1[_3];
        _7 = &_1;
        _8 = std::ops::Range::<usize> { start: const 1_usize, end: const 3_usize };
        _6 = <[i32; 5] as Index<std::ops::Range<usize>>>::index(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = Len((*_6));
        _23 = const test_array_slice::promoted[1];
        _15 = &_2;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_15) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = [move _14];
        _12 = &_13;
        _11 = Arguments::<'_>::new_v1::<2, 1>(_23, _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = _print(move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _22 = const test_array_slice::promoted[0];
        _21 = &_9;
        _20 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_21) -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = [move _20];
        _18 = &_19;
        _17 = Arguments::<'_>::new_v1::<2, 1>(_22, _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = _print(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

const test_array_slice::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "切片长度: ", const "\n"];
        _0 = &_1;
        return;
    }
}

const test_array_slice::promoted[1]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "第一个元素: ", const "\n"];
        _0 = &_1;
        return;
    }
}
