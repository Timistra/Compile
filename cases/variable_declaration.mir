// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_variable_declaration() -> () {
    let mut _0: ();
    let mut _3: i32;
    let mut _4: i32;
    let mut _5: (i32, bool);
    let mut _6: (&i32, &i32);
    let mut _7: &i32;
    let mut _8: &i32;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const 10_i32;
        let mut _1: i32;
        scope 2 {
            debug y => _1;
            let _2: i32;
            scope 3 {
                debug z => _2;
                let _9: &i32;
                let _10: &i32;
                scope 4 {
                    debug left_val => _9;
                    debug right_val => _10;
                    let _14: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _14;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 20_i32;
        _3 = const 10_i32;
        _4 = copy _1;
        _5 = AddWithOverflow(copy _3, copy _4);
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _4) -> [success: bb1, unwind continue];
    }

    bb1: {
        _2 = move (_5.0: i32);
        _1 = copy _2;
        _7 = &_1;
        _8 = const test_variable_declaration::promoted[0];
        _6 = (move _7, move _8);
        _9 = copy (_6.0: &i32);
        _10 = copy (_6.1: &i32);
        _12 = copy (*_9);
        _13 = copy (*_10);
        _11 = Eq(move _12, move _13);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        return;
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, copy _9, copy _10, move _16) -> unwind continue;
    }
}

const test_variable_declaration::promoted[0]: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 30_i32;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = test_variable_declaration() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
