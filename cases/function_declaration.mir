// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn add(_1: i32, _2: i32) -> i32 {
    debug x => _1;
    debug y => _2;
    let mut _0: i32;
    let mut _3: (i32, bool);
    scope 1 {
        debug z => _0;
    }

    bb0: {
        _3 = AddWithOverflow(copy _1, copy _2);
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", copy _1, copy _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_3.0: i32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let _4: &[&str; 2];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &i32;
    scope 1 {
        debug sum => _1;
    }

    bb0: {
        _1 = add(const 5_i32, const 10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = const main::promoted[0];
        _8 = &_1;
        _7 = core::fmt::rt::Argument::<'_>::new_display::<i32>(copy _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = [move _7];
        _5 = &_6;
        _3 = Arguments::<'_>::new_v1::<2, 1>(copy _4, copy _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = _print(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

const main::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Result of add(5, 10): ", const "\n"];
        _0 = &_1;
        return;
    }
}
